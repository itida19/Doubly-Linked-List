import java.util.Scanner;

class Employee {
    int SSN;
    String Name;
    String Dept;
    String Designation;
    float Sal;
    long PhNo;
    Employee prev;
    Employee next;

    public Employee() {
        this.prev = null;
        this.next = null;
    }
}

class DoublyLinkedList {
    private Employee head;

    public void createList(int N) {
        Scanner scanner = new Scanner(System.in);
        for (int i = 0; i < N; ++i) {
            Employee newEmployee = new Employee();
            System.out.println("Enter Employee " + (i + 1) + " details:");
            System.out.print("SSN: ");
            newEmployee.SSN = scanner.nextInt();
            System.out.print("Name: ");
            scanner.nextLine(); // Consume the newline character
            newEmployee.Name = scanner.nextLine();
            System.out.print("Dept: ");
            newEmployee.Dept = scanner.nextLine();
            System.out.print("Designation: ");
            newEmployee.Designation = scanner.nextLine();
            System.out.print("Salary: ");
            newEmployee.Sal = scanner.nextFloat();
            System.out.print("Phone Number: ");
            newEmployee.PhNo = scanner.nextLong();

            if (head == null) {
                head = newEmployee;
            } else {
                Employee temp = head;
                while (temp.next != null) {
                    temp = temp.next;
                }
                temp.next = newEmployee;
                newEmployee.prev = temp;
            }
        }
    }

    public void displayList() {
        if (head == null) {
            System.out.println("Doubly Linked List is empty.");
            return;
        }
        Employee temp = head;
        int count = 0;
        System.out.println("Doubly Linked List:");
        while (temp != null) {
            System.out.println("SSN: " + temp.SSN + "\tName: " + temp.Name + "\tDept: " +
                    temp.Dept + "\tDesignation: " + temp.Designation + "\tSalary: " + temp.Sal +
                    "\tPhone Number: " + temp.PhNo);
            temp = temp.next;
            count++;
        }
        System.out.println("Number of nodes in the Doubly Linked List: " + count);
    }

    public void insertAtEnd() {
        Scanner scanner = new Scanner(System.in);
        Employee newEmployee = new Employee();
        System.out.println("Enter Employee details to insert at the end:");
        System.out.print("SSN: ");
        newEmployee.SSN = scanner.nextInt();
        System.out.print("Name: ");
        scanner.nextLine(); // Consume the newline character
        newEmployee.Name = scanner.nextLine();
        System.out.print("Dept: ");
        newEmployee.Dept = scanner.nextLine();
        System.out.print("Designation: ");
        newEmployee.Designation = scanner.nextLine();
        System.out.print("Salary: ");
        newEmployee.Sal = scanner.nextFloat();
        System.out.print("Phone Number: ");
        newEmployee.PhNo = scanner.nextLong();

        newEmployee.next = null;
        newEmployee.prev = null;
        if (head == null) {
            head = newEmployee;
        } else {
            Employee temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newEmployee;
            newEmployee.prev = temp;
        }
        System.out.println("Employee inserted at the end successfully.");
    }

    public void deleteAtEnd() {
        if (head == null) {
            System.out.println("Doubly Linked List is empty. Cannot delete from an empty list.");
            return;
        }
        Employee temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        if (temp.prev != null) {
            temp.prev.next = null;
        } else {
            head = null;
        }
        System.out.println("Employee deleted from the end successfully.");
    }

    public void insertAtFront() {
        Scanner scanner = new Scanner(System.in);
        Employee newEmployee = new Employee();
        System.out.println("Enter Employee details to insert at the front:");
        System.out.print("SSN: ");
        newEmployee.SSN = scanner.nextInt();
        System.out.print("Name: ");
        scanner.nextLine(); // Consume the newline character
        newEmployee.Name = scanner.nextLine();
        System.out.print("Dept: ");
        newEmployee.Dept = scanner.nextLine();
        System.out.print("Designation: ");
        newEmployee.Designation = scanner.nextLine();
        System.out.print("Salary: ");
        newEmployee.Sal = scanner.nextFloat();
        System.out.print("Phone Number: ");
        newEmployee.PhNo = scanner.nextLong();

        newEmployee.next = head;
        newEmployee.prev = null;
        if (head != null) {
            head.prev = newEmployee;
        }
        head = newEmployee;
        System.out.println("Employee inserted at the front successfully.");
    }

    public void deleteAtFront() {
        if (head == null) {
            System.out.println("Doubly Linked List is empty. Cannot delete from an empty list.");
            return;
        }
        Employee temp = head;
        head = temp.next;
        if (head != null) {
            head.prev = null;
        }
        System.out.println("Employee deleted from the front successfully.");
    }
}

public class DoublyLinkedListMenu {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DoublyLinkedList dll = new DoublyLinkedList();

        while (true) {
            System.out.println("\n----- Doubly Linked List Operations -----");
            System.out.println("1. Create DLL of N Employees (End Insertion)");
            System.out.println("2. Display DLL and Count Nodes");
            System.out.println("3. Insert at End");
            System.out.println("4. Delete at End");
            System.out.println("5. Insert at Front");
            System.out.println("6. Delete at Front");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.print("Enter the number of employees (N): ");
                    int N = scanner.nextInt();
                    dll.createList(N);
                    break;
                case 2:
                    dll.displayList();
                    break;
                case 3:
                    dll.insertAtEnd();
                    break;
                case 4:
                    dll.deleteAtEnd();
                    break;
                case 5:
                    dll.insertAtFront();
                    break;
                case 6:
                    dll.deleteAtFront();
                    break;
                case 7:
                    System.out.println("Exiting program.");
                    System.exit(0);
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a valid option.");
            }
        }
    }
}
